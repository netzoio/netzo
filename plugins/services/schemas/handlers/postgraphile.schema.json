{
    "description": "Handler for Postgres database, based on `postgraphile`",
    "additionalProperties": false,
    "type": "object",
    "title": "PostGraphileHandler",
    "properties": {
        "connectionString": {
            "type": "string",
            "description": "A connection string to your Postgres database"
        },
        "schemaName": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "additionalItems": false,
            "description": "An array of strings which specifies the PostgreSQL schemas that PostGraphile will use to create a GraphQL schema. The default schema is the public schema."
        },
        "pool": {
            "anyOf": [
                {
                    "type": "object",
                    "additionalProperties": true
                },
                {
                    "type": "string"
                },
                {
                    "type": "array",
                    "additionalItems": true
                }
            ],
            "description": "Connection Pool instance or settings or you can provide the path of a code file that exports any of those"
        },
        "appendPlugins": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "additionalItems": false,
            "description": "Extra Postgraphile Plugins to append"
        },
        "skipPlugins": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "additionalItems": false,
            "description": "Postgraphile Plugins to skip (e.g. \"graphile-build#NodePlugin\")"
        },
        "options": {
            "description": "Extra Postgraphile options that will be added to the postgraphile constructor. It can either be an object or a string pointing to the object's path (e.g. \"./my-config#options\"). See the [postgraphile docs](https://www.graphile.org/postgraphile/usage-library/) for more information. (Any of: JSON, String)",
            "anyOf": [
                {
                    "type": "object",
                    "properties": {}
                },
                {
                    "type": "string"
                }
            ]
        },
        "subscriptions": {
            "type": "boolean",
            "description": "Enable GraphQL websocket transport support for subscriptions (default: true)"
        },
        "live": {
            "type": "boolean",
            "description": "Enables live-query support via GraphQL subscriptions (sends updated payload any time nested collections/records change) (default: true)"
        }
    }
}