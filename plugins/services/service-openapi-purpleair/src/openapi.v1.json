{
    "openapi": "3.0.2",
    "info": {
        "title": "Purple Air Sensors API",
        "description": "A RESTful API for PurpleAir sensors following the OpenAPI 3.0 specification.\n\nSome useful links:\n- [Website](https://www2.purpleair.com/)\n- [API Documentation](https://api.purpleair.com)",
        "termsOfService": "https://www2.purpleair.com/policies/terms-of-service",
        "contact": {
            "email": "contact@purpleair.com"
        },
        "version": "1.0.10"
    },
    "externalDocs": {
        "description": "Find out more about Swagger",
        "url": "http://swagger.io"
    },
    "servers": [
        {
            "url": "https://api.purpleair.com/v1"
        }
    ],
    "security": [
        {
            "apiReadKey": []
        }
    ],
    "tags": [
        {
            "name": "sensor",
            "description": "A Purple Air sensor",
            "externalDocs": {
                "description": "Read the API documentation",
                "url": "https://api.purpleair.com"
            }
        }
    ],
    "paths": {
        "/sensors": {
            "get": {
                "tags": [
                    "sensor"
                ],
                "summary": "Get sensors data that match parameters",
                "description": "Retrieves a list with the latest data of multiple sensors matching the provided parameters.",
                "operationId": "getSensors",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/fields"
                    },
                    {
                        "$ref": "#/components/parameters/locationType"
                    },
                    {
                        "$ref": "#/components/parameters/readKeys"
                    },
                    {
                        "$ref": "#/components/parameters/showOnly"
                    },
                    {
                        "$ref": "#/components/parameters/modifiedSince"
                    },
                    {
                        "$ref": "#/components/parameters/maxAge"
                    },
                    {
                        "$ref": "#/components/parameters/northWestLongitude"
                    },
                    {
                        "$ref": "#/components/parameters/northWestLatitude"
                    },
                    {
                        "$ref": "#/components/parameters/southEastLongitude"
                    },
                    {
                        "$ref": "#/components/parameters/southEastLatitude"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/sensors/{sensor_index}": {
            "get": {
                "tags": [
                    "sensor"
                ],
                "summary": "Get sensor data by index",
                "description": "Get sensor data by sensor index",
                "operationId": "getSensorDataById",
                "parameters": [
                    {
                        "name": "sensor_index",
                        "in": "path",
                        "description": "The sensor_index as found in the JSON for this specific sensor.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/SensorIndex"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/readKeys"
                    },
                    {
                        "$ref": "#/components/parameters/fields"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "SensorIndex": {
                "type": "integer",
                "description": "The sensor_index as found in the JSON for this specific sensor.",
                "example": 10221
            },
            "Fields": {
                "type": "string",
                "description": "A comma separated list of the following values; 0.3_um_count, 0.3_um_count_a, 0.3_um_count_b, 0.5_um_count, 0.5_um_count_a, 0.5_um_count_b, 1.0_um_count, 1.0_um_count_a, 1.0_um_count_b, 2.5_um_count, 2.5_um_count_a, 2.5_um_count_b, 5.0_um_count, 5.0_um_count_a, 5.0_um_count_b, 10.0_um_count 10.0_um_count_a, 10.0_um_count_b, altitude, analog_input, channel_flags, channel_flags_auto, channel_flags_manual, channel_state, confidence, confidence_auto, confidence_manual, date_created, firmware_upgrade, firmware_version, hardware, humidity, humidity_a, humidity_b, icon, last_modified, last_seen, latitude, led_brightness, location_type, location_type, longitude, memory, model, modified_since,name, ozone1, pa_latency, pm2.5, pm2.5_1week, pm2.5_1week_a, pm2.5_1week_b, pm2.5_6hour, pm2.5_6hour_a, pm2.5_6hour_b, pm2.5_10minute, pm2.5_10minute_a, pm2.5_10minute_b, pm2.5_24hour, pm2.5_24hour_a, pm2.5_24hour_b, pm2.5_30minute, pm2.5_30minute_a, pm2.5_30minute_b, pm2.5_60minute, pm2.5_60minute_a, pm2.5_60minute_b, pm2.5_a, pm2.5_alt, pm2.5_alt_a, pm2.5_alt_b, pm2.5_atm, pm2.5_atm_a, pm2.5_atm_b, pm2.5_b, pm2.5_cf_1, pm2.5_cf_1_a, pm2.5_cf_1_b, pm10.0, pm10.0_a, pm10.0_atm, pm10.0_atm_a, pm10.0_atm_b, pm10.0_b, pm10.0_cf_1, pm10.0_cf_1_a, pm10.0_cf_1_b, position_rating, pressure, pressure_a, pressure_b, private, rssi, temperature, temperature_a, temperature_b, time_stamp, uptime, voc, voc_a, voc_b",
                "example": "name, temperature, pressure, humidity"
            },
            "LocationType": {
                "type": "string",
                "description": "The location_type of the sensors. Possible values are 0 = Outside or 1 = Inside.",
                "example": 1
            },
            "ReadKeys": {
                "type": "string",
                "description": "This read_key is required for private devices. It is separate to the api_key and each sensor has its own read_key. Submit multiple keys by separating them with a comma.",
                "example": "key-one,key-two,key-three"
            },
            "ShowOnly": {
                "type": "string",
                "description": "A comma (,) separated list of sensor_index values. When provided, the results are limited only to the sensors included in this list.",
                "example": "20112, 56473"
            },
            "ModifiedSince": {
                "type": "number",
                "description": "Using the time_stamp value from a previous call (recommended) will limit results to those with new values since the last request. Using a value of 0 will match sensors modified at any time.",
                "example": 0
            },
            "MaxAge": {
                "type": "integer",
                "description": "Filter results to only include sensors modified or updated within the last number of seconds. Using a value of 0 will match sensors of any age.",
                "default": 604800,
                "example": 604800
            },
            "Nwlng": {
                "type": "number",
                "description": "A north west longitude for the bounding box. Use a bounding box to limit the sensors returned to a specific geographic area. The bounding box is defined by two points, a north west latitude/longitude and a south east latitude/longitude.",
                "example": 84.2378
            },
            "Nwlat": {
                "type": "number",
                "description": "A north west latitude for the bounding box.",
                "example": -45.243
            },
            "Selng": {
                "type": "number",
                "description": "A south east longitude for the bounding box.",
                "example": -45.654
            },
            "Selat": {
                "type": "number",
                "description": "A south east latitude for the bounding box.",
                "example": 45.45
            }
        },
        "parameters": {
            "fields": {
                "name": "fields",
                "in": "query",
                "required": false,
                "description": "The 'fields' parameter specifies which 'sensor data fields' to include in the response. More   info [here](https://api.purpleair.com/#api-sensors-get-sensors-data).",
                "schema": {
                    "$ref": "#/components/schemas/Fields"
                }
            },
            "locationType": {
                "name": "location_type",
                "in": "query",
                "required": false,
                "description": "The location_type of the sensors.",
                "schema": {
                    "$ref": "#/components/schemas/LocationType"
                }
            },
            "readKeys": {
                "name": "read_keys",
                "in": "query",
                "description": "This read_key is required for private devices and is separate to the api_key, each sensor has its own read_key. Submit multiple keys by separating them with a comma.",
                "required": false,
                "schema": {
                    "$ref": "#/components/schemas/ReadKeys"
                }
            },
            "showOnly": {
                "name": "show_only",
                "in": "query",
                "required": false,
                "description": "A comma separated list of sensor_index values. When provided, the results are limited only to the sensors included in this list.",
                "schema": {
                    "$ref": "#/components/schemas/ShowOnly"
                }
            },
            "modifiedSince": {
                "name": "modified_since",
                "in": "query",
                "required": false,
                "description": "The modified_since parameter causes only sensors modified after the provided time stamp to be included in the results.",
                "schema": {
                    "$ref": "#/components/schemas/ModifiedSince"
                }
            },
            "maxAge": {
                "name": "max_age",
                "in": "query",
                "required": false,
                "description": "Filter results to only include sensors modified or updated within the last number of seconds. Using a value of 0 will match sensors of any age.",
                "schema": {
                    "$ref": "#/components/schemas/MaxAge"
                }
            },
            "northWestLongitude": {
                "name": "nwlang",
                "in": "query",
                "required": false,
                "description": "A north west longitude for the bounding box.",
                "schema": {
                    "$ref": "#/components/schemas/Nwlng"
                }
            },
            "northWestLatitude": {
                "name": "nwlat",
                "in": "query",
                "required": false,
                "description": "A north west latitude for the bounding box.",
                "schema": {
                    "$ref": "#/components/schemas/Nwlat"
                }
            },
            "southEastLongitude": {
                "name": "selng",
                "in": "query",
                "required": false,
                "description": "A south east longitude for the bounding box.",
                "schema": {
                    "$ref": "#/components/schemas/Selng"
                }
            },
            "southEastLatitude": {
                "name": "selat",
                "in": "query",
                "required": false,
                "description": "A south east latitude for the bounding box.",
                "schema": {
                    "$ref": "#/components/schemas/Selat"
                }
            }
        },
        "securitySchemes": {
            "apiReadKey": {
                "type": "apiKey",
                "name": "X-API-Key",
                "in": "header"
            }
        }
    }
}